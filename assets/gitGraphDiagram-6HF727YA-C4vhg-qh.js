import{s as t}from"./chunk-VSLJSFIP-BTtAKk-w.js";import{c as e}from"./chunk-4KE642ED-BCl8rqO_.js";import{p as r}from"./gitGraph-YCYPL57B-MEVJTYR7-CeCJEwl_.js";import{ar as a,m as n,as as o,at as i,J as s,d as c,v as l,Q as d,b as h,I as m,au as $,av as g,w as y,B as p,M as x,F as u,L as f,A as b}from"./mermaid.esm.min-BVbUoQyg.js";import"./chunk-5ZJXQJOJ-CxgYzFsF.js";import"./app-BT_HRkEE.js";var w={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},B=a.gitGraph,E=n((()=>o({...B,...i().gitGraph})),"getConfig"),v=new t((()=>{let t=E(),e=t.mainBranchName,r=t.mainBranchOrder;return{mainBranchName:e,commits:new Map,head:null,branchConfig:new Map([[e,{name:e,order:r}]]),branches:new Map([[e,null]]),currBranch:e,direction:"LR",seq:0,options:{}}}));function k(){return g({length:7})}function L(t,e){let r=Object.create(null);return t.reduce(((t,a)=>{let n=e(a);return r[n]||(r[n]=!0,t.push(a)),t}),[])}n(k,"getID"),n(L,"uniqBy");var C=n((function(t){v.records.direction=t}),"setDirection"),T=n((function(t){s.debug("options str",t),t=(t=null==t?void 0:t.trim())||"{}";try{v.records.options=JSON.parse(t)}catch(e){s.error("error while parsing gitGraph options",e.message)}}),"setOptions"),M=n((function(){return v.records.options}),"getOptions"),P=n((function(t){let e=t.msg,r=t.id,a=t.type,n=t.tags;s.info("commit",e,r,a,n),s.debug("Entering commit:",e,r,a,n);let o=E();r=c.sanitizeText(r,o),e=c.sanitizeText(e,o),n=null==n?void 0:n.map((t=>c.sanitizeText(t,o)));let i={id:r||v.records.seq+"-"+k(),message:e,seq:v.records.seq++,type:a??w.NORMAL,tags:n??[],parents:null==v.records.head?[]:[v.records.head.id],branch:v.records.currBranch};v.records.head=i,s.info("main branch",o.mainBranchName),v.records.commits.set(i.id,i),v.records.branches.set(v.records.currBranch,i.id),s.debug("in pushCommit "+i.id)}),"commit"),R=n((function(t){let e=t.name,r=t.order;if(e=c.sanitizeText(e,E()),v.records.branches.has(e))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${e}")`);v.records.branches.set(e,null!=v.records.head?v.records.head.id:null),v.records.branchConfig.set(e,{name:e,order:r}),G(e),s.debug("in createBranch")}),"branch"),I=n((t=>{let e=t.branch,r=t.id,a=t.type,n=t.tags,o=E();e=c.sanitizeText(e,o),r&&(r=c.sanitizeText(r,o));let i=v.records.branches.get(v.records.currBranch),l=v.records.branches.get(e),d=i?v.records.commits.get(i):void 0,h=l?v.records.commits.get(l):void 0;if(d&&h&&d.branch===e)throw new Error(`Cannot merge branch '${e}' into itself.`);if(v.records.currBranch===e){let t=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(void 0===d||!d){let t=new Error(`Incorrect usage of "merge". Current branch (${v.records.currBranch})has no commits`);throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["commit"]},t}if(!v.records.branches.has(e)){let t=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") does not exist");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:[`branch ${e}`]},t}if(void 0===h||!h){let t=new Error('Incorrect usage of "merge". Branch to be merged ('+e+") has no commits");throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:['"commit"']},t}if(d===h){let t=new Error('Incorrect usage of "merge". Both branches have same head');throw t.hash={text:`merge ${e}`,token:`merge ${e}`,expected:["branch abc"]},t}if(r&&v.records.commits.has(r)){let t=new Error('Incorrect usage of "merge". Commit with id:'+r+" already exists, use different custom Id");throw t.hash={text:`merge ${e} ${r} ${a} ${null==n?void 0:n.join(" ")}`,token:`merge ${e} ${r} ${a} ${null==n?void 0:n.join(" ")}`,expected:[`merge ${e} ${r}_UNIQUE ${a} ${null==n?void 0:n.join(" ")}`]},t}let m=l||"",$={id:r||`${v.records.seq}-${k()}`,message:`merged branch ${e} into ${v.records.currBranch}`,seq:v.records.seq++,parents:null==v.records.head?[]:[v.records.head.id,m],branch:v.records.currBranch,type:w.MERGE,customType:a,customId:!!r,tags:n??[]};v.records.head=$,v.records.commits.set($.id,$),v.records.branches.set(v.records.currBranch,$.id),s.debug(v.records.branches),s.debug("in mergeBranch")}),"merge"),A=n((function(t){let e=t.id,r=t.targetId,a=t.tags,n=t.parent;s.debug("Entering cherryPick:",e,r,a);let o=E();if(e=c.sanitizeText(e,o),r=c.sanitizeText(r,o),a=null==a?void 0:a.map((t=>c.sanitizeText(t,o))),n=c.sanitizeText(n,o),!e||!v.records.commits.has(e)){let t=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let i=v.records.commits.get(e);if(void 0===i||!i)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(n&&(!Array.isArray(i.parents)||!i.parents.includes(n)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");let l=i.branch;if(i.type===w.MERGE&&!n)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!r||!v.records.commits.has(r)){if(l===v.records.currBranch){let t=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let t=v.records.branches.get(v.records.currBranch);if(void 0===t||!t){let t=new Error(`Incorrect usage of "cherry-pick". Current branch (${v.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let o=v.records.commits.get(t);if(void 0===o||!o){let t=new Error(`Incorrect usage of "cherry-pick". Current branch (${v.records.currBranch})has no commits`);throw t.hash={text:`cherryPick ${e} ${r}`,token:`cherryPick ${e} ${r}`,expected:["cherry-pick abc"]},t}let c={id:v.records.seq+"-"+k(),message:`cherry-picked ${null==i?void 0:i.message} into ${v.records.currBranch}`,seq:v.records.seq++,parents:null==v.records.head?[]:[v.records.head.id,i.id],branch:v.records.currBranch,type:w.CHERRY_PICK,tags:a?a.filter(Boolean):[`cherry-pick:${i.id}${i.type===w.MERGE?`|parent:${n}`:""}`]};v.records.head=c,v.records.commits.set(c.id,c),v.records.branches.set(v.records.currBranch,c.id),s.debug(v.records.branches),s.debug("in cherryPick")}}),"cherryPick"),G=n((function(t){if(t=c.sanitizeText(t,E()),!v.records.branches.has(t)){let e=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${t}")`);throw e.hash={text:`checkout ${t}`,token:`checkout ${t}`,expected:[`branch ${t}`]},e}{v.records.currBranch=t;let e=v.records.branches.get(v.records.currBranch);v.records.head=void 0!==e&&e?v.records.commits.get(e)??null:null}}),"checkout");function O(t,e,r){let a=t.indexOf(e);-1===a?t.push(r):t.splice(a,1,r)}function q(t){let e=t.reduce(((t,e)=>t.seq>e.seq?t:e),t[0]),r="";t.forEach((function(t){r+=t===e?"\t*":"\t|"}));let a=[r,e.id,e.seq];for(let n in v.records.branches)v.records.branches.get(n)===e.id&&a.push(n);if(s.debug(a.join(" ")),e.parents&&2==e.parents.length&&e.parents[0]&&e.parents[1]){let r=v.records.commits.get(e.parents[0]);O(t,e,r),e.parents[1]&&t.push(v.records.commits.get(e.parents[1]))}else{if(0==e.parents.length)return;if(e.parents[0]){let r=v.records.commits.get(e.parents[0]);O(t,e,r)}}q(t=L(t,(t=>t.id)))}n(O,"upsert"),n(q,"prettyPrintCommitHistory");var H=n((function(){s.debug(v.records.commits),q([N()[0]])}),"prettyPrint"),z=n((function(){v.reset(),l()}),"clear"),S=n((function(){return[...v.records.branchConfig.values()].map(((t,e)=>null!==t.order&&void 0!==t.order?t:{...t,order:parseFloat(`0.${e}`)})).sort(((t,e)=>(t.order??0)-(e.order??0))).map((({name:t})=>({name:t})))}),"getBranchesAsObjArray"),j=n((function(){return v.records.branches}),"getBranches"),D=n((function(){return v.records.commits}),"getCommits"),N=n((function(){let t=[...v.records.commits.values()];return t.forEach((function(t){s.debug(t.id)})),t.sort(((t,e)=>t.seq-e.seq)),t}),"getCommitsArray"),W=n((function(){return v.records.currBranch}),"getCurrentBranch"),F=n((function(){return v.records.direction}),"getDirection"),Y=n((function(){return v.records.head}),"getHead"),K={commitType:w,getConfig:E,setDirection:C,setOptions:T,getOptions:M,commit:P,branch:R,merge:I,cherryPick:A,checkout:G,prettyPrint:H,clear:z,getBranchesAsObjArray:S,getBranches:j,getCommits:D,getCommitsArray:N,getCurrentBranch:W,getDirection:F,getHead:Y,setAccTitle:y,getAccTitle:p,getAccDescription:x,setAccDescription:u,setDiagramTitle:f,getDiagramTitle:b},J=n(((t,r)=>{e(t,r),t.dir&&r.setDirection(t.dir);for(let e of t.statements)_(e,r)}),"populate"),_=n(((t,e)=>{let r={Commit:n((t=>e.commit(V(t))),"Commit"),Branch:n((t=>e.branch(Q(t))),"Branch"),Merge:n((t=>e.merge(U(t))),"Merge"),Checkout:n((t=>e.checkout(X(t))),"Checkout"),CherryPicking:n((t=>e.cherryPick(Z(t))),"CherryPicking")}[t.$type];r?r(t):s.error(`Unknown statement type: ${t.$type}`)}),"parseStatement"),V=n((t=>({id:t.id,msg:t.message??"",type:void 0!==t.type?w[t.type]:w.NORMAL,tags:t.tags??void 0})),"parseCommit"),Q=n((t=>({name:t.name,order:t.order??0})),"parseBranch"),U=n((t=>({branch:t.branch,id:t.id??"",type:void 0!==t.type?w[t.type]:void 0,tags:t.tags??void 0})),"parseMerge"),X=n((t=>t.branch),"parseCheckout"),Z=n((t=>{var e;return{id:t.id,targetId:"",tags:0===(null==(e=t.tags)?void 0:e.length)?void 0:t.tags,parent:t.parent}}),"parseCherryPicking"),tt={parse:n((async t=>{let e=await r("gitGraph",t);s.debug(e),J(e,K)}),"parse")},et=d(),rt=null==et?void 0:et.gitGraph,at=10,nt=40,ot=new Map,it=new Map,st=new Map,ct=[],lt=0,dt="LR",ht=n((()=>{ot.clear(),it.clear(),st.clear(),lt=0,ct=[],dt="LR"}),"clear"),mt=n((t=>{let e=document.createElementNS("http://www.w3.org/2000/svg","text");return("string"==typeof t?t.split(/\\n|\n|<br\s*\/?>/gi):t).forEach((t=>{let r=document.createElementNS("http://www.w3.org/2000/svg","tspan");r.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),r.setAttribute("dy","1em"),r.setAttribute("x","0"),r.setAttribute("class","row"),r.textContent=t.trim(),e.appendChild(r)})),e}),"drawText"),$t=n((t=>{let e,r,a;return"BT"===dt?(r=n(((t,e)=>t<=e),"comparisonFunc"),a=1/0):(r=n(((t,e)=>t>=e),"comparisonFunc"),a=0),t.forEach((t=>{var n,o;let i="TB"===dt||"BT"==dt?null==(n=it.get(t))?void 0:n.y:null==(o=it.get(t))?void 0:o.x;void 0!==i&&r(i,a)&&(e=t,a=i)})),e}),"findClosestParent"),gt=n((t=>{let e="",r=1/0;return t.forEach((t=>{let a=it.get(t).y;a<=r&&(e=t,r=a)})),e||void 0}),"findClosestParentBT"),yt=n(((t,e,r)=>{let a=r,n=r,o=[];t.forEach((t=>{let r=e.get(t);if(!r)throw new Error(`Commit not found for key ${t}`);r.parents.length?(a=xt(r),n=Math.max(a,n)):o.push(r),ut(r,a)})),a=n,o.forEach((t=>{ft(t,a,r)})),t.forEach((t=>{let r=e.get(t);if(null==r?void 0:r.parents.length){let t=gt(r.parents);a=it.get(t).y-nt,a<=n&&(n=a);let e=ot.get(r.branch).pos,o=a-at;it.set(r.id,{x:e,y:o})}}))}),"setParallelBTPos"),pt=n((t=>{var e;let r=$t(t.parents.filter((t=>null!==t)));if(!r)throw new Error(`Closest parent not found for commit ${t.id}`);let a=null==(e=it.get(r))?void 0:e.y;if(void 0===a)throw new Error(`Closest parent position not found for commit ${t.id}`);return a}),"findClosestParentPos"),xt=n((t=>pt(t)+nt),"calculateCommitPosition"),ut=n(((t,e)=>{let r=ot.get(t.branch);if(!r)throw new Error(`Branch not found for commit ${t.id}`);let a=r.pos,n=e+at;return it.set(t.id,{x:a,y:n}),{x:a,y:n}}),"setCommitPosition"),ft=n(((t,e,r)=>{let a=ot.get(t.branch);if(!a)throw new Error(`Branch not found for commit ${t.id}`);let n=e+r,o=a.pos;it.set(t.id,{x:o,y:n})}),"setRootPosition"),bt=n(((t,e,r,a,n,o)=>{if(o===w.HIGHLIGHT)t.append("rect").attr("x",r.x-10).attr("y",r.y-10).attr("width",20).attr("height",20).attr("class",`commit ${e.id} commit-highlight${n%8} ${a}-outer`),t.append("rect").attr("x",r.x-6).attr("y",r.y-6).attr("width",12).attr("height",12).attr("class",`commit ${e.id} commit${n%8} ${a}-inner`);else if(o===w.CHERRY_PICK)t.append("circle").attr("cx",r.x).attr("cy",r.y).attr("r",10).attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x-3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("circle").attr("cx",r.x+3).attr("cy",r.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x+3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`),t.append("line").attr("x1",r.x-3).attr("y1",r.y+1).attr("x2",r.x).attr("y2",r.y-5).attr("stroke","#fff").attr("class",`commit ${e.id} ${a}`);else{let i=t.append("circle");if(i.attr("cx",r.x),i.attr("cy",r.y),i.attr("r",e.type===w.MERGE?9:10),i.attr("class",`commit ${e.id} commit${n%8}`),o===w.MERGE){let o=t.append("circle");o.attr("cx",r.x),o.attr("cy",r.y),o.attr("r",6),o.attr("class",`commit ${a} ${e.id} commit${n%8}`)}o===w.REVERSE&&t.append("path").attr("d",`M ${r.x-5},${r.y-5}L${r.x+5},${r.y+5}M${r.x-5},${r.y+5}L${r.x+5},${r.y-5}`).attr("class",`commit ${a} ${e.id} commit${n%8}`)}}),"drawCommitBullet"),wt=n(((t,e,r,a)=>{var n;if(e.type!==w.CHERRY_PICK&&(e.customId&&e.type===w.MERGE||e.type!==w.MERGE)&&(null==rt?void 0:rt.showCommitLabel)){let o=t.append("g"),i=o.insert("rect").attr("class","commit-label-bkg"),s=o.append("text").attr("x",a).attr("y",r.y+25).attr("class","commit-label").text(e.id),c=null==(n=s.node())?void 0:n.getBBox();if(c&&(i.attr("x",r.posWithOffset-c.width/2-2).attr("y",r.y+13.5).attr("width",c.width+4).attr("height",c.height+4),"TB"===dt||"BT"===dt?(i.attr("x",r.x-(c.width+16+5)).attr("y",r.y-12),s.attr("x",r.x-(c.width+16)).attr("y",r.y+c.height-12)):s.attr("x",r.posWithOffset-c.width/2),rt.rotateCommitLabel))if("TB"===dt||"BT"===dt)s.attr("transform","rotate(-45, "+r.x+", "+r.y+")"),i.attr("transform","rotate(-45, "+r.x+", "+r.y+")");else{let t=-7.5-(c.width+10)/25*9.5,e=10+c.width/25*8.5;o.attr("transform","translate("+t+", "+e+") rotate(-45, "+a+", "+r.y+")")}}}),"drawCommitLabel"),Bt=n(((t,e,r,a)=>{var n;if(e.tags.length>0){let o=0,i=0,s=0,c=[];for(let a of e.tags.reverse()){let e=t.insert("polygon"),l=t.append("circle"),d=t.append("text").attr("y",r.y-16-o).attr("class","tag-label").text(a),h=null==(n=d.node())?void 0:n.getBBox();if(!h)throw new Error("Tag bbox not found");i=Math.max(i,h.width),s=Math.max(s,h.height),d.attr("x",r.posWithOffset-h.width/2),c.push({tag:d,hole:l,rect:e,yOffset:o}),o+=20}for(let{tag:t,hole:e,rect:n,yOffset:l}of c){let o=s/2,c=r.y-19.2-l;if(n.attr("class","tag-label-bkg").attr("points",`\n      ${a-i/2-2},${c+2}  \n      ${a-i/2-2},${c-2}\n      ${r.posWithOffset-i/2-4},${c-o-2}\n      ${r.posWithOffset+i/2+4},${c-o-2}\n      ${r.posWithOffset+i/2+4},${c+o+2}\n      ${r.posWithOffset-i/2-4},${c+o+2}`),e.attr("cy",c).attr("cx",a-i/2+2).attr("r",1.5).attr("class","tag-hole"),"TB"===dt||"BT"===dt){let s=a+l;n.attr("class","tag-label-bkg").attr("points",`\n        ${r.x},${s+2}\n        ${r.x},${s-2}\n        ${r.x+at},${s-o-2}\n        ${r.x+at+i+4},${s-o-2}\n        ${r.x+at+i+4},${s+o+2}\n        ${r.x+at},${s+o+2}`).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),e.attr("cx",r.x+2).attr("cy",s).attr("transform","translate(12,12) rotate(45, "+r.x+","+a+")"),t.attr("x",r.x+5).attr("y",s+3).attr("transform","translate(14,14) rotate(45, "+r.x+","+a+")")}}}}),"drawCommitTags"),Et=n((t=>{switch(t.customType??t.type){case w.NORMAL:return"commit-normal";case w.REVERSE:return"commit-reverse";case w.HIGHLIGHT:return"commit-highlight";case w.MERGE:return"commit-merge";case w.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}}),"getCommitClassType"),vt=n(((t,e,r,a)=>{let n={x:0,y:0};if(!(t.parents.length>0))return"TB"===e?30:"BT"===e?(a.get(t.id)??n).y-nt:0;{let r=$t(t.parents);if(r){let o=a.get(r)??n;return"TB"===e?o.y+nt:"BT"===e?(a.get(t.id)??n).y-nt:o.x+nt}}return 0}),"calculatePosition"),kt=n(((t,e,r)=>{var a,n;let o="BT"===dt&&r?e:e+at,i="TB"===dt||"BT"===dt?o:null==(a=ot.get(t.branch))?void 0:a.pos,s="TB"===dt||"BT"===dt?null==(n=ot.get(t.branch))?void 0:n.pos:o;if(void 0===s||void 0===i)throw new Error(`Position were undefined for commit ${t.id}`);return{x:s,y:i,posWithOffset:o}}),"getCommitPosition"),Lt=n(((t,e,r)=>{if(!rt)throw new Error("GitGraph config not found");let a=t.append("g").attr("class","commit-bullets"),o=t.append("g").attr("class","commit-labels"),i="TB"===dt||"BT"===dt?30:0,s=[...e.keys()],c=(null==rt?void 0:rt.parallelCommits)??!1,l=n(((t,r)=>{var a,n;let o=null==(a=e.get(t))?void 0:a.seq,i=null==(n=e.get(r))?void 0:n.seq;return void 0!==o&&void 0!==i?o-i:0}),"sortKeys"),d=s.sort(l);"BT"===dt&&(c&&yt(d,e,i),d=d.reverse()),d.forEach((t=>{var n;let s=e.get(t);if(!s)throw new Error(`Commit not found for key ${t}`);c&&(i=vt(s,dt,i,it));let l=kt(s,i,c);if(r){let t=Et(s),e=s.customType??s.type,r=(null==(n=ot.get(s.branch))?void 0:n.index)??0;bt(a,s,l,t,r,e),wt(o,s,l,i),Bt(o,s,l,i)}"TB"===dt||"BT"===dt?it.set(s.id,{x:l.x,y:l.posWithOffset}):it.set(s.id,{x:l.posWithOffset,y:l.y}),i="BT"===dt&&c?i+nt:i+nt+at,i>lt&&(lt=i)}))}),"drawCommits"),Ct=n(((t,e,r,a,o)=>{let i=("TB"===dt||"BT"===dt?r.x<a.x:r.y<a.y)?e.branch:t.branch,s=n((t=>t.branch===i),"isOnBranchToGetCurve"),c=n((r=>r.seq>t.seq&&r.seq<e.seq),"isBetweenCommits");return[...o.values()].some((t=>c(t)&&s(t)))}),"shouldRerouteArrow"),Tt=n(((t,e,r=0)=>{let a=t+Math.abs(t-e)/2;if(r>5)return a;if(ct.every((t=>Math.abs(t-a)>=10)))return ct.push(a),a;let n=Math.abs(t-e);return Tt(t,e-n/5,r+1)}),"findLane"),Mt=n(((t,e,r,a)=>{var n,o,i,s,c;let l=it.get(e.id),d=it.get(r.id);if(void 0===l||void 0===d)throw new Error(`Commit positions not found for commits ${e.id} and ${r.id}`);let h,m=Ct(e,r,l,d,a),$="",g="",y=0,p=0,x=null==(n=ot.get(r.branch))?void 0:n.index;if(r.type===w.MERGE&&e.id!==r.parents[0]&&(x=null==(o=ot.get(e.branch))?void 0:o.index),m){$="A 10 10, 0, 0, 0,",g="A 10 10, 0, 0, 1,",y=10,p=10;let t=l.y<d.y?Tt(l.y,d.y):Tt(d.y,l.y),r=l.x<d.x?Tt(l.x,d.x):Tt(d.x,l.x);"TB"===dt?l.x<d.x?h=`M ${l.x} ${l.y} L ${r-y} ${l.y} ${g} ${r} ${l.y+p} L ${r} ${d.y-y} ${$} ${r+p} ${d.y} L ${d.x} ${d.y}`:(x=null==(i=ot.get(e.branch))?void 0:i.index,h=`M ${l.x} ${l.y} L ${r+y} ${l.y} ${$} ${r} ${l.y+p} L ${r} ${d.y-y} ${g} ${r-p} ${d.y} L ${d.x} ${d.y}`):"BT"===dt?l.x<d.x?h=`M ${l.x} ${l.y} L ${r-y} ${l.y} ${$} ${r} ${l.y-p} L ${r} ${d.y+y} ${g} ${r+p} ${d.y} L ${d.x} ${d.y}`:(x=null==(s=ot.get(e.branch))?void 0:s.index,h=`M ${l.x} ${l.y} L ${r+y} ${l.y} ${g} ${r} ${l.y-p} L ${r} ${d.y+y} ${$} ${r-p} ${d.y} L ${d.x} ${d.y}`):l.y<d.y?h=`M ${l.x} ${l.y} L ${l.x} ${t-y} ${$} ${l.x+p} ${t} L ${d.x-y} ${t} ${g} ${d.x} ${t+p} L ${d.x} ${d.y}`:(x=null==(c=ot.get(e.branch))?void 0:c.index,h=`M ${l.x} ${l.y} L ${l.x} ${t+y} ${g} ${l.x+p} ${t} L ${d.x-y} ${t} ${$} ${d.x} ${t-p} L ${d.x} ${d.y}`)}else $="A 20 20, 0, 0, 0,",g="A 20 20, 0, 0, 1,",y=20,p=20,"TB"===dt?(l.x<d.x&&(h=r.type===w.MERGE&&e.id!==r.parents[0]?`M ${l.x} ${l.y} L ${l.x} ${d.y-y} ${$} ${l.x+p} ${d.y} L ${d.x} ${d.y}`:`M ${l.x} ${l.y} L ${d.x-y} ${l.y} ${g} ${d.x} ${l.y+p} L ${d.x} ${d.y}`),l.x>d.x&&($="A 20 20, 0, 0, 0,",g="A 20 20, 0, 0, 1,",y=20,p=20,h=r.type===w.MERGE&&e.id!==r.parents[0]?`M ${l.x} ${l.y} L ${l.x} ${d.y-y} ${g} ${l.x-p} ${d.y} L ${d.x} ${d.y}`:`M ${l.x} ${l.y} L ${d.x+y} ${l.y} ${$} ${d.x} ${l.y+p} L ${d.x} ${d.y}`),l.x===d.x&&(h=`M ${l.x} ${l.y} L ${d.x} ${d.y}`)):"BT"===dt?(l.x<d.x&&(h=r.type===w.MERGE&&e.id!==r.parents[0]?`M ${l.x} ${l.y} L ${l.x} ${d.y+y} ${g} ${l.x+p} ${d.y} L ${d.x} ${d.y}`:`M ${l.x} ${l.y} L ${d.x-y} ${l.y} ${$} ${d.x} ${l.y-p} L ${d.x} ${d.y}`),l.x>d.x&&($="A 20 20, 0, 0, 0,",g="A 20 20, 0, 0, 1,",y=20,p=20,h=r.type===w.MERGE&&e.id!==r.parents[0]?`M ${l.x} ${l.y} L ${l.x} ${d.y+y} ${$} ${l.x-p} ${d.y} L ${d.x} ${d.y}`:`M ${l.x} ${l.y} L ${d.x-y} ${l.y} ${$} ${d.x} ${l.y-p} L ${d.x} ${d.y}`),l.x===d.x&&(h=`M ${l.x} ${l.y} L ${d.x} ${d.y}`)):(l.y<d.y&&(h=r.type===w.MERGE&&e.id!==r.parents[0]?`M ${l.x} ${l.y} L ${d.x-y} ${l.y} ${g} ${d.x} ${l.y+p} L ${d.x} ${d.y}`:`M ${l.x} ${l.y} L ${l.x} ${d.y-y} ${$} ${l.x+p} ${d.y} L ${d.x} ${d.y}`),l.y>d.y&&(h=r.type===w.MERGE&&e.id!==r.parents[0]?`M ${l.x} ${l.y} L ${d.x-y} ${l.y} ${$} ${d.x} ${l.y-p} L ${d.x} ${d.y}`:`M ${l.x} ${l.y} L ${l.x} ${d.y+y} ${g} ${l.x+p} ${d.y} L ${d.x} ${d.y}`),l.y===d.y&&(h=`M ${l.x} ${l.y} L ${d.x} ${d.y}`));if(void 0===h)throw new Error("Line definition not found");t.append("path").attr("d",h).attr("class","arrow arrow"+x%8)}),"drawArrow"),Pt=n(((t,e)=>{let r=t.append("g").attr("class","commit-arrows");[...e.keys()].forEach((t=>{let a=e.get(t);a.parents&&a.parents.length>0&&a.parents.forEach((t=>{Mt(r,e.get(t),a,e)}))}))}),"drawArrows"),Rt=n(((t,e)=>{let r=t.append("g");e.forEach(((t,e)=>{var a;let n=e%8,o=null==(a=ot.get(t.name))?void 0:a.pos;if(void 0===o)throw new Error(`Position not found for branch ${t.name}`);let i=r.append("line");i.attr("x1",0),i.attr("y1",o),i.attr("x2",lt),i.attr("y2",o),i.attr("class","branch branch"+n),"TB"===dt?(i.attr("y1",30),i.attr("x1",o),i.attr("y2",lt),i.attr("x2",o)):"BT"===dt&&(i.attr("y1",lt),i.attr("x1",o),i.attr("y2",30),i.attr("x2",o)),ct.push(o);let s=t.name,c=mt(s),l=r.insert("rect"),d=r.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+n);d.node().appendChild(c);let h=c.getBBox();l.attr("class","branchLabelBkg label"+n).attr("rx",4).attr("ry",4).attr("x",-h.width-4-(!0===(null==rt?void 0:rt.rotateCommitLabel)?30:0)).attr("y",-h.height/2+8).attr("width",h.width+18).attr("height",h.height+4),d.attr("transform","translate("+(-h.width-14-(!0===(null==rt?void 0:rt.rotateCommitLabel)?30:0))+", "+(o-h.height/2-1)+")"),"TB"===dt?(l.attr("x",o-h.width/2-10).attr("y",0),d.attr("transform","translate("+(o-h.width/2-5)+", 0)")):"BT"===dt?(l.attr("x",o-h.width/2-10).attr("y",lt),d.attr("transform","translate("+(o-h.width/2-5)+", "+lt+")")):l.attr("transform","translate(-19, "+(o-h.height/2)+")")}))}),"drawBranches"),It=n((function(t,e,r,a,n){return ot.set(t,{pos:e,index:r}),e+(50+(n?40:0)+("TB"===dt||"BT"===dt?a.width/2:0))}),"setBranchPosition"),At={draw:n((function(t,e,r,a){if(ht(),s.debug("in gitgraph renderer",t+"\n","id:",e,r),!rt)throw new Error("GitGraph config not found");let n=rt.rotateCommitLabel??!1,o=a.db;st=o.getCommits();let i=o.getBranchesAsObjArray();dt=o.getDirection();let c=h(`[id="${e}"]`),l=0;i.forEach(((t,e)=>{var r;let a=mt(t.name),o=c.append("g"),i=o.insert("g").attr("class","branchLabel"),s=i.insert("g").attr("class","label branch-label");null==(r=s.node())||r.appendChild(a);let d=a.getBBox();l=It(t.name,l,e,d,n),s.remove(),i.remove(),o.remove()})),Lt(c,st,!1),rt.showBranches&&Rt(c,i),Pt(c,st),Lt(c,st,!0),m.insertTitle(c,"gitTitleText",rt.titleTopMargin??0,o.getDiagramTitle()),$(void 0,c,rt.diagramPadding,rt.useMaxWidth)}),"draw")},Gt=n((t=>`\n  .commit-id,\n  .commit-msg,\n  .branch-label {\n    fill: lightgrey;\n    color: lightgrey;\n    font-family: 'trebuchet ms', verdana, arial, sans-serif;\n    font-family: var(--mermaid-font-family);\n  }\n  ${[0,1,2,3,4,5,6,7].map((e=>`\n        .branch-label${e} { fill: ${t["gitBranchLabel"+e]}; }\n        .commit${e} { stroke: ${t["git"+e]}; fill: ${t["git"+e]}; }\n        .commit-highlight${e} { stroke: ${t["gitInv"+e]}; fill: ${t["gitInv"+e]}; }\n        .label${e}  { fill: ${t["git"+e]}; }\n        .arrow${e} { stroke: ${t["git"+e]}; }\n        `)).join("\n")}\n\n  .branch {\n    stroke-width: 1;\n    stroke: ${t.lineColor};\n    stroke-dasharray: 2;\n  }\n  .commit-label { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelColor};}\n  .commit-label-bkg { font-size: ${t.commitLabelFontSize}; fill: ${t.commitLabelBackground}; opacity: 0.5; }\n  .tag-label { font-size: ${t.tagLabelFontSize}; fill: ${t.tagLabelColor};}\n  .tag-label-bkg { fill: ${t.tagLabelBackground}; stroke: ${t.tagLabelBorder}; }\n  .tag-hole { fill: ${t.textColor}; }\n\n  .commit-merge {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n  .commit-reverse {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n    stroke-width: 3;\n  }\n  .commit-highlight-outer {\n  }\n  .commit-highlight-inner {\n    stroke: ${t.primaryColor};\n    fill: ${t.primaryColor};\n  }\n\n  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}\n  .gitTitleText {\n    text-anchor: middle;\n    font-size: 18px;\n    fill: ${t.textColor};\n  }\n`),"getStyles"),Ot={parser:tt,db:K,renderer:At,styles:Gt};export{Ot as diagram};